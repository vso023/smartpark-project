from api.patterns.singleton import ParkingDataManager
from api.patterns.adapter import GPSAdapter
from api.patterns.observer import ParkingAvailabilityObserver
from api.patterns.composite import (
    CompositeCriteria, AvailabilityCriteria,
    DistanceCriteria, PriceCriteria
)


class ParkingSearchFacade:
    """
    PATR√ìN FACADE
    Proporciona una interfaz simplificada que coordina m√∫ltiples subsistemas

    ESCALABILIDAD:
    - Centraliza la orquestaci√≥n entre subsistemas (gesti√≥n de datos, GPS, observadores,
      criterios de b√∫squeda). Al encapsular la l√≥gica de coordinaci√≥n en esta fachada,
      el sistema puede crecer a√±adiendo nuevos subsistemas (p. ej. notificaciones, pagos,
      an√°lisis) sin que los clientes (frontend u otros servicios) necesiten conocer los
      detalles de integraci√≥n. Solo se ampl√≠a la fachada o se le agrega un nuevo m√≥dulo
      interno, manteniendo bajo el acoplamiento y reduciendo el coste de cambios.
    - Permite escalado horizontal y vertical de componentes individuales. La fachada act√∫a
      como punto √∫nico de entrada para enrutar y delegar trabajo a microservicios o
      procesos as√≠ncronos (colas, workers). Esto facilita distribuir la carga y
      optimizar performance por subsistema sin tocar la interfaz p√∫blica.

    INTEROPERABILIDAD:
    - Provee una interfaz uniforme a clientes heterog√©neos: la fachada oculta las
      diferencias entre implementaciones internas (p. ej. distintos adaptadores GPS,
      distintas fuentes de datos). Gracias a esta capa, los clientes consumen un contrato
      estable aunque se reemplacen o mezclen proveedores internos.
    - Facilita la integraci√≥n con adaptadores y patrones (Adapter, Composite, Observer),
      permitiendo intercambiar o componer m√≥dulos con un impacto m√≠nimo. Esto mejora la
      tolerancia a fallos: si un proveedor de rutas falla, la fachada puede invocar un
      fallback (otro adapter) y devolver una respuesta consistente al cliente.

    EXPERIENCIA DE USUARIO (UX):
    - Simplifica la experiencia del cliente (frontend) ofreciendo respuestas ya
      enriquecidas y listas para mostrar (distancia, ruta, precio estimado, calificaci√≥n).
      Al devolver una estructura estable y consistente, la UI puede renderizar r√°pidamente
      sin l√≥gica compleja de preparaci√≥n de datos.
    - Permite optimizaciones orientadas a UX como caching de b√∫squedas frecuentes,
      agregaci√≥n de resultados y pre-c√°lculo de rutas para reducir latencia. Tambi√©n
      facilita la implementaci√≥n de comportamientos centrados en el usuario como
      recomendaciones, ordenamiento por preferencia y manejo transparente de errores
      (mensajes amigables, fallback autom√°tico), mejorando la percepci√≥n de velocidad
      y fiabilidad.
    """

    def __init__(self):
        self.data_manager = ParkingDataManager()
        self.gps_adapter = GPSAdapter()
        self.observer = ParkingAvailabilityObserver()
        print("üèõÔ∏è FACADE: ParkingSearchFacade inicializado")

    def find_nearest_parking(self, user_location, filters=None):
        """M√©todo simplificado para encontrar el parqueadero m√°s cercano"""
        print("üèõÔ∏è FACADE: Iniciando b√∫squeda de parqueadero m√°s cercano")

        # 1. Obtener todos los parqueaderos disponibles
        parkings = self.data_manager.get_all_parkings()
        try:
            count_text = f"{parkings.count()}"
        except Exception:
            # parkings puede ser una lista en algunos contextos
            count_text = f"{len(parkings)}"
        print(f"üèõÔ∏è FACADE: {count_text} parqueaderos encontrados en BD")

        # 2. PATR√ìN COMPOSITE: Aplicar filtros compuestos
        criteria = CompositeCriteria('AND')
        criteria.add(AvailabilityCriteria())

        if filters:
            if 'max_distance' in filters:
                criteria.add(DistanceCriteria(filters['max_distance'], self.gps_adapter))
            if 'max_price' in filters:
                criteria.add(PriceCriteria(filters['max_price']))

        filtered_parkings = [
            p for p in parkings
            if criteria.matches(p, user_location)
        ]
        print(f"üèõÔ∏è FACADE: {len(filtered_parkings)} parqueaderos despu√©s de filtros")

        if not filtered_parkings:
            return None

        # 3. Calcular distancias y encontrar el m√°s cercano
        parking_with_distance = []
        for parking in filtered_parkings:
            distance = self.gps_adapter.get_distance(
                user_location['lat'], user_location['lng'],
                parking.latitude, parking.longitude
            )
            parking_with_distance.append({
                'parking': parking,
                'distance': distance
            })

        # 4. Ordenar por distancia
        nearest = min(parking_with_distance, key=lambda x: x['distance'])
        print(f"üèõÔ∏è FACADE: Parqueadero m√°s cercano: {nearest['parking'].name} ({nearest['distance']} km)")

        # 5. Calcular ruta usando GPS Adapter
        route = self.gps_adapter.calculate_route(
            user_location,
            {'lat': nearest['parking'].latitude, 'lng': nearest['parking'].longitude}
        )

        enriched_data = self._enrich_parking_data(nearest['parking'], nearest['distance'], route)

        return enriched_data

    def _enrich_parking_data(self, parking, distance, route):

        # Generar espacio aleatorio
        import random
        letters = ['A', 'B', 'C', 'D']
        space = f"{random.choice(letters)}-{random.randint(1, 25):02d}"

        return {
            'id': parking.id,
            'name': parking.name,
            'latitude': parking.latitude,  # Directo en nivel superior
            'longitude': parking.longitude,  # Directo en nivel superior
            'location': {  # Tambi√©n mantener para compatibilidad
                'lat': parking.latitude,
                'lng': parking.longitude
            },
            'distance_km': distance,
            'price_per_hour': float(parking.price_per_hour),
            'is_available': parking.is_available,
            'features': parking.features,
            'route': route,
            'space': space,
            # Informaci√≥n adicional calculada 
            'estimated_time_minutes': route['duration_minutes'] if route else None,
            'estimated_cost': float(parking.price_per_hour) * 2,
            'rating': round(4 + (hash(parking.name) % 10) / 10, 1),
            'capacity': parking.capacity,
            'reviews_count': 124
        }