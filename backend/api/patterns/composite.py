from abc import ABC, abstractmethod


class SearchCriteria(ABC):
    """
    PATR칍N COMPOSITE
    Componente base para criterios de b칰squeda
    Permite construir filtros complejos y anidados
    
    Mejoras en Escalabilidad, Interoperabilidad y UX

    ESCALABILIDAD: Permite construir filtros de b칰squeda complejos mediante composici칩n jer치rquica 
    sin modificar c칩digo existente. Agregar nuevos criterios (ej: SecurityCriteria, CapacityCriteria) solo requiere 
    crear una nueva clase que implemente SearchCriteria, y pueden combinarse infinitamente: 
    (Disponible AND (Precio < 5000 OR Distancia < 2km)) AND Techado, escalando de filtros simples a sistemas de 
    b칰squeda avanzada sin refactorizaci칩n.

    INTEROPERABILIDAD: Proporciona interfaz uniforme (matches()) para todos los criterios independientemente de su 
    complejidad o fuente de datos, permitiendo que criterios simples (AvailabilityCriteria consulta BD local) y 
    complejos (DistanceCriteria usa GPS externo) trabajen juntos seamlessly. Los criterios compuestos tratan hojas 
    y ramas de forma id칠ntica, facilitando integraci칩n con sistemas externos de filtrado, APIs de terceros o 
    motores de b칰squeda sin conocer detalles de implementaci칩n.

    EXPERIENCIA DE USUARIO: Mejora UX al permitir b칰squedas altamente personalizadas con sintaxis natural 
    ("parqueaderos disponibles, cerca de m칤 y econ칩micos" se traduce a CompositeCriteria AND con tres criterios), 
    respuestas instant치neas mediante evaluaci칩n lazy (cortocircuito en operaciones AND/OR que evita c치lculos 
    innecesarios), y flexibilidad total donde usuarios pueden guardar filtros complejos como templates reutilizables, 
    creando experiencia de b칰squeda profesional comparable a plataformas enterprise sin complejidad en UI.
    """
    
    @abstractmethod
    def matches(self, parking, user_location):
        pass


class AvailabilityCriteria(SearchCriteria):
    """Criterio: Parqueadero disponible"""
    
    def matches(self, parking, user_location):
        return parking.is_available


class DistanceCriteria(SearchCriteria):
    """Criterio: Distancia m치xima"""
    
    def __init__(self, max_distance_km, gps_adapter):
        self.max_distance_km = max_distance_km
        self.gps_adapter = gps_adapter
    
    def matches(self, parking, user_location):
        distance = self.gps_adapter.get_distance(
            user_location['lat'], user_location['lng'],
            parking.latitude, parking.longitude
        )
        return distance <= self.max_distance_km


class PriceCriteria(SearchCriteria):
    """Criterio: Precio m치ximo"""
    
    def __init__(self, max_price):
        self.max_price = max_price
    
    def matches(self, parking, user_location):
        return parking.price_per_hour <= self.max_price


class CompositeCriteria(SearchCriteria):
    """
    Criterio compuesto que puede contener m칰ltiples criterios
    Soporta operaciones AND y OR
    """
    
    def __init__(self, operation='AND'):
        self.criteria = []
        self.operation = operation  # 'AND' o 'OR'
        print(f"游꺕 COMPOSITE: Criterio compuesto creado ({operation})")
    
    def add(self, criteria: SearchCriteria):
        """A침ade un criterio al compuesto"""
        self.criteria.append(criteria)
        print(f"游꺕 COMPOSITE: Criterio a침adido (Total: {len(self.criteria)})")
    
    def matches(self, parking, user_location):
        """Eval칰a si el parking cumple con los criterios compuestos"""
        if not self.criteria:
            return True
        
        if self.operation == 'AND':
            return all(c.matches(parking, user_location) for c in self.criteria)
        else:  # OR
            return any(c.matches(parking, user_location) for c in self.criteria)